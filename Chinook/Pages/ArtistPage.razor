@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @if (Tracks != null && Tracks.Count > 0)
            {
                @foreach (var track in Tracks)
                {
                    <tr>
                        <td>@track.AlbumTitle</td>
                        <td>@track.TrackName</td>
                        <td>
                            @if (track.IsFavorite)
                            {
                                <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                            }
                            else
                            {
                                <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                            }
                            <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                        </td>
                    </tr>
                }
            }
        </tbody>
        </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="@ExistingPlaylists">Add to existing playlist</label>
            <select class="form-control" @bind="@SelectedPlaylistId">
                @if (ExistingPlaylists != null && ExistingPlaylists.Count > 0 )
                {
                    @foreach (var playlist in ExistingPlaylists)
                    {
                        <option value="@playlist.PlayListId"> @playlist.Name </option>
                    }
                }
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" @bind="@NewPlaylistName" class="form-control" placeholder="Name for the new playlist">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] IArtistService ArtistService { get; set; }
    [Inject] IAlbumService AlbumService { get; set; }
    [Inject] IPlaylistService PlaylistService { get; set; }

    private Modal PlaylistDialog { get; set; }
    private ArtistDto Artist;
    private List<PlaylistTrackDto> Tracks;
    private List<AlbumDto> Albums; 
    private PlaylistTrackDto SelectedTrack;
    private List<ExistingPlaylistDto> ExistingPlaylists; 
    private long SelectedPlaylistId; 
    private string InfoMessage;
    private string CurrentUserId;
    private string NewPlaylistName;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = await ArtistService.GetArtistById(ArtistId);
        Tracks = await AlbumService.GetTracksOfArtist(ArtistId, CurrentUserId);
        Albums = await AlbumService.GetAlbumsOfArtist(ArtistId);

        ExistingPlaylists = await PlaylistService.GetExistingPlaylists(); 
    }

    private async Task<string> GetUserId()
    {
        var user = (await AuthenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private  async Task FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var result =  await PlaylistService.AddTrackToFavoritePlaylist(trackId, CurrentUserId);
        if (result.SuccessfullyAdded == true )
        {
            track!.IsFavorite = true; 
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist My favorite tracks.";
            NavigationManager.Refresh(); 
        }
        else
        {
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} did not add to playlist My favorite tracks.";
        }

    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);

        var result = await PlaylistService.RemoveTrackFromFavoritePlaylist(trackId);
        if (result.SuccessfullyAdded == true)
        {
            track!.IsFavorite = false;
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist My favorite tracks.";
        }
        else
        {
            InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} did not remove from playlist My favorite tracks.";
        }

    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.First(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        if (SelectedPlaylistId > 0 )
        {
            await AddTrackToExistingPlaylist(); 

        }
        else if (!String.IsNullOrEmpty(NewPlaylistName))
        {
            await AddTrackToNewPlaylist(); 
        }

        PlaylistDialog.Close();
    }

    private async Task AddTrackToExistingPlaylist()
    {
        string selectedPlaylistName = ExistingPlaylists.First(p => p.PlayListId == SelectedPlaylistId).Name!;
        var result = await PlaylistService.AddTrackToPlaylist(SelectedPlaylistId, SelectedTrack.TrackId, CurrentUserId);
        if (result.SuccessfullyAdded)
        {
            CloseInfoMessage();
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {selectedPlaylistName}.";
            NavigationManager.Refresh(); 
        }
        else
        {
            InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} did not add to playlist {selectedPlaylistName}.";
        }
        SelectedPlaylistId = 0;
    }

    private async Task AddTrackToNewPlaylist()
    {
        var result = await PlaylistService.CreatePlaylist(NewPlaylistName, SelectedTrack.TrackId, CurrentUserId);

        if (result.SuccessfullyAdded)
        {
            CloseInfoMessage();
            InfoMessage = $"New playlist {NewPlaylistName} added to playlist is created .";
            NavigationManager.Refresh();
        }
        else
        {
            InfoMessage = $"New playlist {NewPlaylistName} added to playlist is not created .";
        }
        NewPlaylistName = String.Empty;
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
