@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    <div class="text-center bg-blue-100">
        <input @bind-value="SearchText" @bind-value:event="oninput" @onkeydown="OnSearch" placeholder="Type artist name and press Enter key to search" />
    </div>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ArtistDto> Artists;
    private List<ArtistDto> FilteredArtists;
    // [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IArtistService artistService { get; set; }

    public string SearchText = String.Empty;

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
        FilteredArtists = GetFilterredArtists();
    }

    public async Task<List<ArtistDto>> GetArtists()
    {
        //  var dbContext = await DbFactory.CreateDbContextAsync();
        // // var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        //  return dbContext.Artists.ToList();

        return await artistService.GetAllArtists();
    }

    public List<ArtistDto> GetFilterredArtists()
    {
        if(!String.IsNullOrEmpty(SearchText))
        {
            return Artists.Where(a => a.Name!.ToLower().Contains(SearchText.ToLower())).Select(a => a).ToList();
        }
        return Artists;
    }

    public void OnSearch(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            FilteredArtists = GetFilterredArtists();
        }
        
    }

   

    // public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    // {
    //     var dbContext = await DbFactory.CreateDbContextAsync();
    //     return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    // }
}
